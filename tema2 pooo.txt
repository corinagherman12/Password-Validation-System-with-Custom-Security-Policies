#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <cmath>
#include <algorithm>
#include <string.h>
using namespace std;
class Policy {
protected: bool  isChecked;
public:
    virtual void check(const std::string& password) = 0;
    bool getCheck() const{
        return isChecked;
    }
};
class   LengthPolicy :public Policy{
private: uint16_t minLength,maxLength;
public:   LengthPolicy(uint16_t minLength){
        this->minLength=minLength;
        this->maxLength=255;
    }
    LengthPolicy(uint16_t minLength,uint16_t maxLength)
    {
        this->minLength=minLength;
        this->maxLength=maxLength;
    }
    void check(const std::string& password)  override{
        if(password.length()>=minLength && password.length()<=maxLength)
            isChecked= true;
        else isChecked= false;
    }
};
class ClassPolicy :public Policy{
private: uint16_t minClassCount;
public: ClassPolicy(uint16_t minClassCount){
        this->minClassCount=minClassCount;
    }
    void check(const std::string& password)  override {
        uint16_t litmare=0,litmica=0,cifre=0,altele=0,clase=0;
        int i;
        for(i=0;i<password.length();i++)
        {
            if(isupper(password[i]))
                litmare++;
            else if(islower(password[i]))
                litmica++;
            else if(isdigit(password[i]))
                cifre++;
            else
                altele++;
        }
        if(litmare!=0)clase++;
        if(litmica!=0)clase++;
        if(cifre!=0)clase++;
        if(altele!=0)clase++;
        if(clase>=minClassCount)
            isChecked= true;
        else
            isChecked= false;
    }
};
class IncludePolicy :public Policy{
private: char characterType;
public: IncludePolicy(char characterType)
    {
        this->characterType=characterType;
    }
    void check(const std::string& password) override{

        isChecked=false;
        for(int i=0;i<password.size();i++){
            if(characterType=='a'){
                if(password[i]>='a' && password[i]<='z'){
                    isChecked=true;
                    break;
                }
            }
            else  if(characterType=='A'){
                if(password[i]>='A' && password[i]<='Z'){
                    isChecked=true;
                    break;
                }
            }

            else if(characterType=='0'){
                if(password[i]>='0' && password[i]<='9'){
                    isChecked=true;
                    break;
                }
            }

            else if(characterType=='$'){
                if(!isalpha(password[i])&&!isdigit(password[i])){
                    isChecked=true;
                    break;
                }
            }
        }
    }

};
class  NotIncludePolicy :public Policy{
private: char characterType;
public: NotIncludePolicy(char characterType)
    {
        this->characterType=characterType;
    }
    void check(const std::string& password) override{

        isChecked=true;
        for(int i=0;i<password.size();i++){
            if(characterType=='a'){
                if(password[i]>='a'&&password[i]<='z'){
                    isChecked=false;
                    break;
                }
            }else if(characterType=='A'){
                if(password[i]>='A'&&password[i]<='Z'){
                    isChecked= false;
                    break;
                }
            }else if(characterType=='0'){
                if(password[i]>='0'&&password[i]<='9'){
                    isChecked=false;
                    break;
                }
            }else if(characterType=='$'){
                if(!isalpha(password[i])&&!isdigit(password[i])){
                    isChecked=false;
                    break;
                }
            }
        }
    }

};
class RepetitionPolicy: public Policy{
private:uint16_t maxCount;
public:RepetitionPolicy(uint16_t maxCount)
    {
        this->maxCount=maxCount;
    }
    void check(const std::string& password) override {
        isChecked=true;
        for (int i = 0; i < password.size(); i++) {
            uint16_t count=1;
            while (i + count < password.size() && password[i + count] == password[i]) {
                count++;
            }
            if (count > maxCount) {
                isChecked = false;
                break;
            }
        }
    }

};
class ConsecutivePolicy : public Policy{
private: uint16_t maxCount;
public:  ConsecutivePolicy(uint16_t valoare) : Policy(){
        maxCount = valoare;
    }

    void check(const string& password) override{
        uint16_t numarare= 1;
        char control = password[0];
        isChecked = true;
        for(int i = 1; i < password.length(); i++){
            if(control + 1 == password[i]){
                numarare++;
                control = password[i];
            }
            else{
                control = password[i];
                numarare= 1;
                continue;
            }

            if(numarare> maxCount){
                isChecked = false;
                break;
            }
        }
    }
};
std::string checkPassword(std::string password, std::vector<Policy*> vector){
    for(int i = 0; i < vector.size(); i++){
        vector[i]->check(password);
        if(vector[i]->getCheck() == false)
            return "NOK";
    }
    return "OK";
}
int main() {
    long long unsigned n;
    scanf("%llu\n", &n);
    vector<Policy*> vector1;
    string tip;
    uint16_t ceva= 0,altceva= 0;
    char caracter;
    for(int i = 0; i < n; i++)
    {
        cin >> tip;
        if(tip == "length"){
            scanf("%hu", &ceva);
            scanf("%c", &caracter);
            if(caracter == ' '){
                scanf("%hu\n", &altceva);
                vector1.push_back(new LengthPolicy(ceva,altceva));
                continue;
            }
            vector1.push_back(new LengthPolicy(ceva));
        }

        else if(tip == "class"){
            scanf("%hu\n", &ceva);
            vector1.push_back(new ClassPolicy(ceva));
        }
        else if (tip == "include"){
            scanf(" %c\n", &caracter);
            vector1.push_back(new IncludePolicy(caracter));
        }
        else if(tip == "ninclude"){
            scanf(" %c\n", &caracter);
            vector1.push_back(new NotIncludePolicy(caracter));
        }
        else if(tip == "repetition"){
            scanf("%hu\n", &ceva);
            vector1.push_back(new RepetitionPolicy(ceva));
        }
        else if(tip == "consecutive"){
            scanf("%hu\n", &ceva);
            vector1.push_back(new ConsecutivePolicy(ceva));
        }
    }
    while (cin>>tip){
        cout << checkPassword(tip, vector1) << "\n";
    }
    return 0;
}